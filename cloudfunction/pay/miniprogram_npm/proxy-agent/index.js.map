{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nvar url = require('url');\nvar LRU = require('lru-cache');\nvar Agent = require('agent-base');\nvar inherits = require('util').inherits;\nvar debug = require('debug')('proxy-agent');\nvar getProxyForUrl = require('proxy-from-env').getProxyForUrl;\n\nvar http = require('http');\nvar https = require('https');\nvar PacProxyAgent = require('pac-proxy-agent');\nvar HttpProxyAgent = require('http-proxy-agent');\nvar HttpsProxyAgent = require('https-proxy-agent');\nvar SocksProxyAgent = require('socks-proxy-agent');\n\n/**\n * Module exports.\n */\n\nexports = module.exports = ProxyAgent;\n\n/**\n * Number of `http.Agent` instances to cache.\n *\n * This value was arbitrarily chosen... a better\n * value could be conceived with some benchmarks.\n */\n\nvar cacheSize = 20;\n\n/**\n * Cache for `http.Agent` instances.\n */\n\nexports.cache = new LRU(cacheSize);\n\n/**\n * Built-in proxy types.\n */\n\nexports.proxies = Object.create(null);\nexports.proxies.http = httpOrHttpsProxy;\nexports.proxies.https = httpOrHttpsProxy;\nexports.proxies.socks = SocksProxyAgent;\nexports.proxies.socks4 = SocksProxyAgent;\nexports.proxies.socks4a = SocksProxyAgent;\nexports.proxies.socks5 = SocksProxyAgent;\nexports.proxies.socks5h = SocksProxyAgent;\n\nPacProxyAgent.protocols.forEach(function (protocol) {\n  exports.proxies['pac+' + protocol] = PacProxyAgent;\n});\n\nfunction httpOrHttps(opts, secureEndpoint) {\n  if (secureEndpoint) {\n    // HTTPS\n    return https.globalAgent;\n  } else {\n    // HTTP\n    return http.globalAgent;\n  }\n}\n\nfunction httpOrHttpsProxy(opts, secureEndpoint) {\n  if (secureEndpoint) {\n    // HTTPS\n    return new HttpsProxyAgent(opts);\n  } else {\n    // HTTP\n    return new HttpProxyAgent(opts);\n  }\n}\n\nfunction mapOptsToProxy(opts) {\n  // NO_PROXY case\n  if (!opts) {\n    return {\n      uri: 'no proxy',\n      fn: httpOrHttps\n    };\n  }\n\n  if ('string' == typeof opts) opts = url.parse(opts);\n\n  var proxies;\n  if (opts.proxies) {\n    proxies = Object.assign({}, exports.proxies, opts.proxies);\n  } else {\n    proxies = exports.proxies;\n  }\n\n  // get the requested proxy \"protocol\"\n  var protocol = opts.protocol;\n  if (!protocol) {\n    throw new TypeError('You must specify a \"protocol\" for the ' +\n                        'proxy type (' + Object.keys(proxies).join(', ') + ')');\n  }\n\n  // strip the trailing \":\" if present\n  if (':' == protocol[protocol.length - 1]) {\n    protocol = protocol.substring(0, protocol.length - 1);\n  }\n\n  // get the proxy `http.Agent` creation function\n  var proxyFn = proxies[protocol];\n  if ('function' != typeof proxyFn) {\n    throw new TypeError('unsupported proxy protocol: \"' + protocol + '\"');\n  }\n\n  // format the proxy info back into a URI, since an opts object\n  // could have been passed in originally. This generated URI is used\n  // as part of the \"key\" for the LRU cache\n  return {\n    opts: opts,\n    uri: url.format({\n      protocol: protocol + ':',\n      slashes: true,\n      auth: opts.auth,\n      hostname: opts.hostname || opts.host,\n      port: opts.port\n    }),\n    fn: proxyFn,\n  }\n}\n\n/**\n * Attempts to get an `http.Agent` instance based off of the given proxy URI\n * information, and the `secure` flag.\n *\n * An LRU cache is used, to prevent unnecessary creation of proxy\n * `http.Agent` instances.\n *\n * @param {String} uri proxy url\n * @param {Boolean} secure true if this is for an HTTPS request, false for HTTP\n * @return {http.Agent}\n * @api public\n */\n\nfunction ProxyAgent (opts) {\n  if (!(this instanceof ProxyAgent)) return new ProxyAgent(opts);\n  debug('creating new ProxyAgent instance: %o', opts);\n  Agent.call(this, connect);\n\n  if (opts) {\n    var proxy = mapOptsToProxy(opts);\n    this.proxy = proxy.opts;\n    this.proxyUri = proxy.uri;\n    this.proxyFn = proxy.fn;\n  }\n}\ninherits(ProxyAgent, Agent);\n\n/**\n *\n */\n\nfunction connect (req, opts, fn) {\n  var proxyOpts = this.proxy;\n  var proxyUri = this.proxyUri;\n  var proxyFn = this.proxyFn;\n\n  // if we did not instantiate with a proxy, set one per request\n  if (!proxyOpts) {\n    var urlOpts = getProxyForUrl(opts);\n    var proxy = mapOptsToProxy(urlOpts, opts);\n    proxyOpts = proxy.opts;\n    proxyUri = proxy.uri;\n    proxyFn = proxy.fn;\n  }\n\n  // create the \"key\" for the LRU cache\n  var key = proxyUri;\n  if (opts.secureEndpoint) key += ' secure';\n\n  // attempt to get a cached `http.Agent` instance first\n  var agent = exports.cache.get(key);\n  if (!agent) {\n    // get an `http.Agent` instance from protocol-specific agent function\n    agent = proxyFn(proxyOpts, opts.secureEndpoint);\n    if (agent) {\n      exports.cache.set(key, agent);\n    }\n  } else {\n    debug('cache hit with key: %o', key);\n  }\n\n  if (!proxyOpts) {\n    agent.addRequest(req, opts);\n  } else {\n    // XXX: agent.callback() is an agent-base-ism\n    agent.callback(req, opts, fn);\n  }\n}\n"]}