{"version":3,"sources":["index.js","util.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["const urllib = require('urllib');\nconst util = require('./util');\nconst replyData = msg => util.buildXML(msg ? {return_code: 'FAIL', return_msg: msg} : {return_code: 'SUCCESS'});\n\nclass Payment {\n  constructor({appid, mchid, partnerKey, pfx, notify_url, refund_url, spbill_create_ip, sandbox} = {}, debug = false) {\n    if (!appid) throw new Error('appid fail');\n    if (!mchid) throw new Error('mchid fail');\n    if (!partnerKey) throw new Error('partnerKey fail');\n\n    this.appid = appid;\n    this.mchid = mchid;\n    this.partnerKey = partnerKey;\n    this.pfx = pfx;\n    this.notify_url = notify_url;\n    this.refund_url = refund_url;\n    this.spbill_create_ip = spbill_create_ip || '127.0.0.1';\n    this.urls = sandbox ? {\n      micropay: 'https://api.mch.weixin.qq.com/sandboxnew/pay/micropay',\n      reverse: 'https://api.mch.weixin.qq.com/sandboxnew/secapi/pay/reverse',\n      unifiedorder: 'https://api.mch.weixin.qq.com/sandboxnew/pay/unifiedorder',\n      orderquery: 'https://api.mch.weixin.qq.com/sandboxnew/pay/orderquery',\n      closeorder: 'https://api.mch.weixin.qq.com/sandboxnew/pay/closeorder',\n      refund: 'https://api.mch.weixin.qq.com/sandboxnew/secapi/pay/refund',\n      refundquery: 'https://api.mch.weixin.qq.com/sandboxnew/pay/refundquery',\n      downloadbill: 'https://api.mch.weixin.qq.com/sandboxnew/pay/downloadbill',\n      downloadfundflow: 'https://api.mch.weixin.qq.com/sandboxnew/pay/downloadfundflow',\n      send_coupon: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaymkttransfers/send_coupon',\n      query_coupon_stock: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaymkttransfers/query_coupon_stock',\n      querycouponsinfo: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaymkttransfers/querycouponsinfo',\n      transfers: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaymkttransfers/promotion/transfers',\n      gettransferinfo: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaymkttransfers/gettransferinfo',\n      sendredpack: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaymkttransfers/sendredpack',\n      sendgroupredpack: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaymkttransfers/sendgroupredpack',\n      gethbinfo: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaymkttransfers/gethbinfo',\n      paybank: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaysptrans/pay_bank',\n      querybank: 'https://api.mch.weixin.qq.com/sandboxnew/mmpaysptrans/query_bank'\n    } : {\n      micropay: 'https://api.mch.weixin.qq.com/pay/micropay',\n      reverse: 'https://api.mch.weixin.qq.com/secapi/pay/reverse',\n      unifiedorder: 'https://api.mch.weixin.qq.com/pay/unifiedorder',\n      orderquery: 'https://api.mch.weixin.qq.com/pay/orderquery',\n      closeorder: 'https://api.mch.weixin.qq.com/pay/closeorder',\n      refund: 'https://api.mch.weixin.qq.com/secapi/pay/refund',\n      refundquery: 'https://api.mch.weixin.qq.com/pay/refundquery',\n      downloadbill: 'https://api.mch.weixin.qq.com/pay/downloadbill',\n      downloadfundflow: 'https://api.mch.weixin.qq.com/pay/downloadfundflow',\n      send_coupon: 'https://api.mch.weixin.qq.com/mmpaymkttransfers/send_coupon',\n      query_coupon_stock: 'https://api.mch.weixin.qq.com/mmpaymkttransfers/query_coupon_stock',\n      querycouponsinfo: 'https://api.mch.weixin.qq.com/mmpaymkttransfers/querycouponsinfo',\n      transfers: 'https://api.mch.weixin.qq.com/mmpaymkttransfers/promotion/transfers',\n      gettransferinfo: 'https://api.mch.weixin.qq.com/mmpaymkttransfers/gettransferinfo',\n      sendredpack: 'https://api.mch.weixin.qq.com/mmpaymkttransfers/sendredpack',\n      sendgroupredpack: 'https://api.mch.weixin.qq.com/mmpaymkttransfers/sendgroupredpack',\n      gethbinfo: 'https://api.mch.weixin.qq.com/mmpaymkttransfers/gethbinfo',\n      paybank: 'https://api.mch.weixin.qq.com/mmpaysptrans/pay_bank',\n      querybank: 'https://api.mch.weixin.qq.com/mmpaysptrans/query_bank',\n      getpublickey: 'https://fraud.mch.weixin.qq.com/risk/getpublickey',\n      getsignkey: 'https://api.mch.weixin.qq.com/sandboxnew/pay/getsignkey',\n      combinedorder: 'https://api.mch.weixin.qq.com/pay/combinedorder',\n    };\n    this.debug = debug;\n  }\n\n  log(...args) {\n    if (this.debug) console.log(...args);\n  }\n\n  static init(...args) {\n    return new Payment(...args);\n  }\n\n  static async sandbox(config, debug) {\n    let {sandbox_signkey} = await Payment.init(config).getSignkey();\n    return new Payment({\n      ...config,\n      partnerKey: sandbox_signkey,\n      sandbox: true\n    }, debug);\n  }\n\n  async _parse(xml, type, signType) {\n    let json = await util.parseXML(xml);\n\n    switch (type) {\n      case 'middleware_nativePay':\n        break;\n      default:\n        if (json.return_code !== 'SUCCESS') throw new Error(json.return_msg || 'XMLDataError');\n    }\n\n    switch (type) {\n      case 'middleware_refund':\n      case 'middleware_nativePay':\n      case 'getsignkey':\n        break;\n      default:\n        if (json.result_code !== 'SUCCESS') throw new Error(json.err_code || 'XMLDataError');\n    }\n\n    switch (type) {\n      case 'getsignkey':\n        break;\n      case 'middleware_refund': {\n        if (json.appid !== this.appid) throw new Error('appid不匹配');\n        if (json.mch_id !== this.mchid) throw new Error('mch_id不匹配');\n        let key = util.md5(this.partnerKey).toLowerCase();\n        let info = util.decrypt(json.req_info, key);\n        json.req_info = await util.parseXML(info);\n        break;\n      }\n      case 'transfers':\n        if (json.mchid !== this.mchid) throw new Error('mchid不匹配');\n        break;\n      case 'sendredpack':\n      case 'sendgroupredpack':\n        if (json.wxappid !== this.appid) throw new Error('wxappid不匹配');\n        if (json.mch_id !== this.mchid) throw new Error('mchid不匹配');\n        break;\n      case 'gethbinfo':\n      case 'gettransferinfo':\n        if (json.mch_id !== this.mchid) throw new Error('mchid不匹配');\n        break;\n      case 'send_coupon':\n      case 'query_coupon_stock':\n      case 'querycouponsinfo':\n        if (json.appid !== this.appid) throw new Error('appid不匹配');\n        if (json.mch_id !== this.mchid) throw new Error('mch_id不匹配');\n        break;\n      case 'getpublickey':\n        break;\n      case 'paybank':\n        if (json.mch_id !== this.mchid) throw new Error('mchid不匹配');\n        break;\n      case 'querybank':\n        if (json.mch_id !== this.mchid) throw new Error('mchid不匹配');\n        break;\n      case 'combinedorder':\n        if (json.combine_appid !== this.appid) throw new Error('appid不匹配');\n        if (json.combine_mch_id !== this.mchid) throw new Error('mch_id不匹配');\n        if (json.sign !== this._getSign(json, 'HMAC-SHA256')) throw new Error('sign签名错误');\n        break;\n      default:\n        if (json.appid !== this.appid) throw new Error('appid不匹配');\n        if (json.mch_id !== this.mchid) throw new Error('mch_id不匹配');\n        if (json.sign !== this._getSign(json, json.sign_type || signType)) throw new Error('sign签名错误');\n    }\n    return json;\n  }\n\n  async _parseBill(xml, format = false) {\n    if (util.checkXML(xml)) {\n      let json = await util.parseXML(xml);\n      throw new Error(json.err_code || json.return_msg || 'XMLDataError');\n    }\n    if (!format) return xml;\n\n    let arr = xml.trim().split(/\\r?\\n/).filter(item => item.trim());\n    let total_data = arr.pop().substr(1).split(',`');\n    let total_title = arr.pop().split(',');\n    let list_title = arr.shift().split(',');\n    let list_data = arr.map(item => item.substr(1).split(',`'));\n    return {total_title, total_data, list_title, list_data};\n  }\n\n  _getSign(params, type = 'MD5') {\n    let str = util.toQueryString(params) + '&key=' + this.partnerKey;\n    switch (type) {\n      case 'MD5':\n        return util.md5(str).toUpperCase();\n      case 'HMAC-SHA256':\n        return util.sha256(str, this.partnerKey).toUpperCase();\n      default:\n        throw new Error('signType Error');\n    }\n  }\n\n  async _request(params, type, cert = false) {\n    // 安全签名\n    params.sign = this._getSign(params, params.sign_type);\n    // 创建请求参数\n    let pkg = {\n      method: 'POST',\n      dataType: 'text',\n      data: util.buildXML(params),\n      timeout: [10000, 15000]\n    };\n\n    if (cert) {\n      pkg.pfx = this.pfx;\n      pkg.passphrase = this.mchid;\n    }\n\n    this.log('post data =>\\r\\n%s\\r\\n', pkg.data);\n    let {status, data} = await urllib.request(this.urls[type], pkg);\n    if (status !== 200) throw new Error('request fail');\n    this.log('receive data =>\\r\\n%s\\r\\n', data);\n\n    return ['downloadbill', 'downloadfundflow'].indexOf(type) < 0 ? this._parse(data, type, params.sign_type) : data;\n  }\n\n  // Express中间件\n  middlewareForExpress(type = 'pay') {\n    return async (req, res, next) => {\n      res.reply = msg => {\n        res.header('Content-Type', 'application/xml; charset=utf-8');\n        res.send(replyData(msg));\n      };\n\n      res.replyNative = (prepay_id, err_code_des) => {\n        res.header('Content-Type', 'application/xml; charset=utf-8');\n        res.send(this._getNativeReply(prepay_id, err_code_des));\n      };\n\n      try {\n        if (typeof req.body !== 'string') throw new Error('XMLDataError');\n        req.weixin = await this._parse(req.body, 'middleware_' + type);\n      } catch (err) {\n        return res.reply(err.message);\n      }\n\n      next();\n    };\n  }\n\n  // Koa中间件\n  middleware(type = 'pay') {\n    return async (ctx, next) => {\n      ctx.reply = msg => {\n        ctx.type = 'application/xml; charset=utf-8';\n        ctx.body = replyData(msg);\n      };\n\n      ctx.replyNative = (prepay_id, err_code_des) => {\n        ctx.type = 'application/xml; charset=utf-8';\n        ctx.body = this._getNativeReply(prepay_id, err_code_des);\n      };\n\n      try {\n        if (typeof ctx.request.body !== 'string') throw new Error('XMLDataError');\n        ctx.request.weixin = await this._parse(ctx.request.body, 'middleware_' + type);\n      } catch (err) {\n        return ctx.reply(err.message);\n      }\n\n      await next();\n    };\n  }\n\n  // 获取沙盒密钥\n  getSignkey() {\n    let pkg = {\n      mch_id: this.mchid,\n      nonce_str: util.generate()\n    };\n    return this._request(pkg, 'getsignkey');\n  }\n\n  // 获取RSA公钥\n  getPublicKey(params) {\n    let pkg = {\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5'\n    };\n    return this._request(pkg, 'getpublickey', true);\n  }\n\n  // 获取JS支付参数(自动下单)\n  async getPayParams(params) {\n    params.trade_type = params.trade_type || 'JSAPI';\n    let order = await this.unifiedOrder(params);\n    return this.getPayParamsByPrepay(order, params.sign_type);\n  }\n\n  // 获取JS支付参数(通过预支付会话标志)\n  getPayParamsByPrepay(params, signType) {\n    let pkg = {\n      appId: params.sub_appid || this.appid,\n      timeStamp: '' + (Date.now() / 1000 | 0),\n      nonceStr: util.generate(),\n      package: 'prepay_id=' + params.prepay_id,\n      signType: signType || 'MD5'\n    };\n    pkg.paySign = this._getSign(pkg, signType);\n    pkg.timestamp = pkg.timeStamp;\n    return pkg;\n  }\n\n  // 获取APP支付参数(自动下单)\n  async getAppParams(params) {\n    params.trade_type = params.trade_type || 'APP';\n    let order = await this.unifiedOrder(params);\n    return this.getAppParamsByPrepay(order, params.sign_type);\n  }\n\n  // 获取APP支付参数(通过预支付会话标志)\n  getAppParamsByPrepay(params, signType) {\n    let pkg = {\n      appid: params.sub_appid || this.appid,\n      partnerid: params.sub_mch_id || this.mchid,\n      prepayid: params.prepay_id,\n      package: 'Sign=WXPay',\n      noncestr: util.generate(),\n      timestamp: '' + (Date.now() / 1000 | 0)\n    };\n    pkg.sign = this._getSign(pkg, signType);\n    return pkg;\n  }\n\n  // 扫码支付, 生成URL(模式一)\n  getNativeUrl(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      time_stamp: '' + (Date.now() / 1000 | 0),\n      nonce_str: util.generate()\n    };\n\n    let url = 'weixin://wxpay/bizpayurl'\n            + '?sign=' + this._getSign(pkg)\n            + '&appid=' + pkg.appid\n            + '&mch_id=' + pkg.mch_id\n            + '&product_id=' + encodeURIComponent(pkg.product_id)\n            + '&time_stamp=' + pkg.time_stamp\n            + '&nonce_str=' + pkg.nonce_str;\n    return url;\n  }\n\n  // 拼装扫码模式一返回值\n  _getNativeReply(prepay_id, err_code_des) {\n    let pkg = {\n      return_code: 'SUCCESS',\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      result_code: 'SUCCESS',\n      prepay_id\n    };\n\n    if (err_code_des) {\n      pkg.result_code = 'FAIL';\n      pkg.err_code_des = err_code_des;\n    }\n\n    pkg.sign = this._getSign(pkg);\n    return util.buildXML(pkg);\n  }\n\n  // 刷卡支付\n  micropay(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5',\n      spbill_create_ip: params.spbill_create_ip || this.spbill_create_ip\n    };\n\n    return this._request(pkg, 'micropay');\n  }\n\n  // 撤销订单\n  reverse(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5'\n    };\n\n    return this._request(pkg, 'reverse', true);\n  }\n\n  // 统一下单\n  unifiedOrder(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5',\n      notify_url: params.notify_url || this.notify_url,\n      spbill_create_ip: params.spbill_create_ip || this.spbill_create_ip,\n      trade_type: params.trade_type || 'JSAPI'\n    };\n\n    return this._request(pkg, 'unifiedorder');\n  }\n\n  // 订单查询\n  orderQuery(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5'\n    };\n\n    return this._request(pkg, 'orderquery');\n  }\n\n  // 关闭订单\n  closeOrder(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5'\n    };\n\n    return this._request(pkg, 'closeorder');\n  }\n\n  // 申请退款\n  refund(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5',\n      op_user_id: params.op_user_id || this.mchid,\n      notify_url: params.notify_url || this.refund_url\n    };\n    if (!pkg.notify_url) delete pkg.notify_url;\n\n    return this._request(pkg, 'refund', true);\n  }\n\n  // 查询退款\n  refundQuery(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5'\n    };\n\n    return this._request(pkg, 'refundquery');\n  }\n\n  // 合单支付\n  combinedOrder(params) {\n    let pkg = {\n      ...params,\n      combine_appid: this.appid,\n      combine_mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: 'HMAC-SHA256',\n      notify_url: params.notify_url || this.notify_url,\n      spbill_create_ip: params.spbill_create_ip || this.spbill_create_ip,\n      trade_type: params.trade_type || 'JSAPI'\n    };\n\n    return this._request(pkg, 'combinedorder');\n  }\n\n  // 下载对帐单\n  async downloadBill(params, format = false) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'MD5',\n      bill_type: params.bill_type || 'ALL'\n    };\n\n    let xml = await this._request(pkg, 'downloadbill');\n    return this._parseBill(xml, format);\n  }\n\n  // 下载资金帐单\n  async downloadFundflow(params, format = false) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      sign_type: params.sign_type || 'HMAC-SHA256',\n      account_type: params.account_type || 'Basic'\n    };\n\n    let xml = await this._request(pkg, 'downloadfundflow', true);\n    return this._parseBill(xml, format);\n  }\n\n  // 发放代金券\n  sendCoupon(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      openid_count: params.openid_count || 1\n    };\n\n    return this._request(pkg, 'send_coupon', true);\n  }\n\n  // 查询代金券批次\n  queryCouponStock(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate()\n    };\n\n    return this._request(pkg, 'query_coupon_stock');\n  }\n\n  // 查询代金券信息\n  queryCouponInfo(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate()\n    };\n\n    return this._request(pkg, 'querycouponsinfo');\n  }\n\n  // 企业付款\n  transfers(params) {\n    let pkg = {\n      ...params,\n      mch_appid: this.appid,\n      mchid: this.mchid,\n      nonce_str: util.generate(),\n      check_name: params.check_name || 'FORCE_CHECK',\n      spbill_create_ip: params.spbill_create_ip || this.spbill_create_ip\n    };\n\n    return this._request(pkg, 'transfers', true);\n  }\n\n  // 查询企业付款\n  transfersQuery(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate()\n    };\n\n    return this._request(pkg, 'gettransferinfo', true);\n  }\n\n  // 企业付款到银行卡\n  async payBank(params) {\n    const data = await this.getPublicKey(params);\n    const pub_key = data && data.result_code === 'SUCCESS' ? data.pub_key : '';\n    if (pub_key === '') throw new Error('get publickey fail');\n\n    let pkg = {\n      ...params,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      enc_bank_no: util.encryptRSA(pub_key, params.enc_bank_no),\n      enc_true_name: util.encryptRSA(pub_key, params.enc_true_name)\n    };\n\n    return this._request(pkg, 'paybank', true);\n  }\n\n  // 查询企业付款到银行卡\n  queryBank(params) {\n    let pkg = {\n      ...params,\n      mch_id: this.mchid,\n      nonce_str: util.generate()\n    };\n\n    return this._request(pkg, 'querybank', true);\n  }\n\n  // 发送普通红包\n  sendRedpack(params) {\n    let pkg = {\n      ...params,\n      wxappid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      client_ip: params.client_ip || this.spbill_create_ip,\n      mch_billno: params.mch_billno || (params.mch_autono ? this.mchid + util.getFullDate() + params.mch_autono : ''),\n      total_num: params.total_num || 1\n    };\n    delete pkg.mch_autono;\n\n    return this._request(pkg, 'sendredpack', true);\n  }\n\n  // 发送裂变红包\n  sendGroupRedpack(params) {\n    let pkg = {\n      ...params,\n      wxappid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      mch_billno: params.mch_billno || (params.mch_autono ? this.mchid + util.getFullDate() + params.mch_autono : ''),\n      total_num: params.total_num || 3,\n      amt_type: params.amt_type || 'ALL_RAND'\n    };\n    delete pkg.mch_autono;\n\n    return this._request(pkg, 'sendgroupredpack', true);\n  }\n\n  // 查询红包记录\n  redpackQuery(params) {\n    let pkg = {\n      ...params,\n      appid: this.appid,\n      mch_id: this.mchid,\n      nonce_str: util.generate(),\n      bill_type: params.bill_type || 'MCHT'\n    };\n\n    return this._request(pkg, 'gethbinfo', true);\n  }\n}\n\nmodule.exports = Payment;\n","const crypto = require('crypto');\nconst xml2js = require('xml2js');\n\nexports.decrypt = (encryptedData, key, iv = '') => {\n  let decipher = crypto.createDecipheriv('aes-256-ecb', key, iv);\n      decipher.setAutoPadding(true);\n  let decoded = decipher.update(encryptedData, 'base64', 'utf8');\n      decoded += decipher.final('utf8');\n  return decoded;\n};\n\nexports.md5 = (str, encoding = 'utf8') => crypto.createHash('md5').update(str, encoding).digest('hex');\nexports.sha256 = (str, key, encoding = 'utf8') => crypto.createHmac('sha256', key).update(str, encoding).digest('hex');\nexports.encryptRSA = (key, hash) => crypto.publicEncrypt(key, new Buffer(hash)).toString('base64');\n\nexports.checkXML = str => {\n  let reg = /^(<\\?xml.*\\?>)?(\\r?\\n)*<xml>(.|\\r?\\n)*<\\/xml>$/i;\n  return reg.test(str.trim());\n};\n\nexports.getFullDate = () => {\n  const str = new Date();\n  let YYYY = str.getFullYear();\n  let MM = ('00' + (str.getMonth() + 1)).substr(-2);\n  let DD = ('00' + str.getDate()).substr(-2);\n  return YYYY + MM + DD;\n};\n\nexports.toQueryString = (obj) => Object.keys(obj)\n  .filter(key => key !== 'sign' && obj[key] !== void 0 && obj[key] !== '')\n  .sort()\n  .map(key => key + '=' + obj[key])\n  .join('&');\n\nexports.generate = (length = 16) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let noceStr = '', maxPos = chars.length;\n  while (length--) noceStr += chars[Math.random() * maxPos | 0];\n  return noceStr;\n};\n\nexports.buildXML = (obj, rootName = 'xml') => {\n  const opt = {xmldec: null, rootName, allowSurrogateChars: true, cdata: true};\n  return new xml2js.Builder(opt).buildObject(obj);\n};\n\nexports.parseXML = (xml) => new Promise((resolve, reject) => {\n  const opt = {trim: true, explicitArray: false, explicitRoot: false};\n  xml2js.parseString(xml, opt, (err, res) => err ? reject(new Error('XMLDataError')) : resolve(res || {}));\n});\n"]}